package notification

import (
	"context"
	"fmt"

	"github.com/NikitaDmitryuk/telegram-media-server/internal/core/domain"
	"github.com/NikitaDmitryuk/telegram-media-server/internal/lang"
)

// TelegramNotificationService –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
type TelegramNotificationService struct {
	bot domain.BotInterface
}

// NewTelegramNotificationService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewTelegramNotificationService(bot domain.BotInterface) domain.NotificationService {
	return &TelegramNotificationService{
		bot: bot,
	}
}

// NotifyDownloadStarted —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
func (s *TelegramNotificationService) NotifyDownloadStarted(_ context.Context, chatID int64, title string) error {
	message := lang.Translate("general.downloads.notifications.started", map[string]any{
		"title": title,
	})

	// –ï—Å–ª–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
	if message == "general.downloads.notifications.started" {
		message = lang.Translate("general.video_downloading", map[string]any{
			"Title": title,
		})
	}

	s.bot.SendMessage(chatID, message, nil)
	return nil
}

// NotifyDownloadProgress —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
func (s *TelegramNotificationService) NotifyDownloadProgress(_ context.Context, chatID int64, title string, progress int) error {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 25%
	if progress%25 != 0 {
		return nil
	}

	// –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
	message := lang.Translate("general.downloads.notifications.progress", map[string]any{
		"title":    title,
		"progress": progress,
	})

	// –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
	if message == "general.downloads.notifications.progress" {
		message = lang.Translate("general.download.progress", map[string]any{
			"Name":     title,
			"Progress": progress,
		})

		// –ï—Å–ª–∏ –∏ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if message == "general.download.progress" {
			message = fmt.Sprintf("üìä %s: %d%%", title, progress)
		}
	}

	s.bot.SendMessage(chatID, message, nil)
	return nil
}

// NotifyDownloadCompleted —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
func (s *TelegramNotificationService) NotifyDownloadCompleted(_ context.Context, chatID int64, title string) error {
	// –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
	message := lang.Translate("general.downloads.notifications.completed", map[string]any{
		"title": title,
	})

	// –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
	if message == "general.downloads.notifications.completed" {
		message = lang.Translate("general.video_successfully_downloaded", map[string]any{
			"Title": title,
		})

		// –ï—Å–ª–∏ –∏ fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if message == "general.video_successfully_downloaded" {
			message = fmt.Sprintf("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %s", title)
		}
	}

	s.bot.SendMessage(chatID, message, nil)
	return nil
}

// NotifyDownloadFailed —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏
func (s *TelegramNotificationService) NotifyDownloadFailed(_ context.Context, chatID int64, title string, downloadErr error) error {
	message := lang.Translate("general.downloads.notifications.failed", map[string]any{
		"title": title,
		"error": downloadErr.Error(),
	})

	// –ï—Å–ª–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
	if message == "general.downloads.notifications.failed" {
		message = lang.Translate("error.downloads.video_download_error", map[string]any{
			"Error": downloadErr.Error(),
		})
	}

	s.bot.SendMessage(chatID, message, nil)
	return nil
}

// MockNotificationService –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type MockNotificationService struct {
	StartedCalls   []NotificationCall
	ProgressCalls  []ProgressCall
	CompletedCalls []NotificationCall
	FailedCalls    []FailedCall
	ShouldError    bool
	ErrorToReturn  error
}

// NotificationCall –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
type NotificationCall struct {
	ChatID int64
	Title  string
}

// ProgressCall –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
type ProgressCall struct {
	ChatID   int64
	Title    string
	Progress int
}

// FailedCall –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
type FailedCall struct {
	ChatID int64
	Title  string
	Error  error
}

// NewMockNotificationService —Å–æ–∑–¥–∞–µ—Ç mock —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func NewMockNotificationService() *MockNotificationService {
	return &MockNotificationService{
		StartedCalls:   make([]NotificationCall, 0),
		ProgressCalls:  make([]ProgressCall, 0),
		CompletedCalls: make([]NotificationCall, 0),
		FailedCalls:    make([]FailedCall, 0),
	}
}

// SetError –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É
func (m *MockNotificationService) SetError(err error) {
	m.ShouldError = true
	m.ErrorToReturn = err
}

// Reset –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã
func (m *MockNotificationService) Reset() {
	m.StartedCalls = nil
	m.ProgressCalls = nil
	m.CompletedCalls = nil
	m.FailedCalls = nil
	m.ShouldError = false
	m.ErrorToReturn = nil
}

// NotifyDownloadStarted mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
func (m *MockNotificationService) NotifyDownloadStarted(_ context.Context, chatID int64, title string) error {
	m.StartedCalls = append(m.StartedCalls, NotificationCall{
		ChatID: chatID,
		Title:  title,
	})

	if m.ShouldError {
		return m.ErrorToReturn
	}
	return nil
}

// NotifyDownloadProgress mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
func (m *MockNotificationService) NotifyDownloadProgress(_ context.Context, chatID int64, title string, progress int) error {
	m.ProgressCalls = append(m.ProgressCalls, ProgressCall{
		ChatID:   chatID,
		Title:    title,
		Progress: progress,
	})

	if m.ShouldError {
		return m.ErrorToReturn
	}
	return nil
}

// NotifyDownloadCompleted mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
func (m *MockNotificationService) NotifyDownloadCompleted(_ context.Context, chatID int64, title string) error {
	m.CompletedCalls = append(m.CompletedCalls, NotificationCall{
		ChatID: chatID,
		Title:  title,
	})

	if m.ShouldError {
		return m.ErrorToReturn
	}
	return nil
}

// NotifyDownloadFailed mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
func (m *MockNotificationService) NotifyDownloadFailed(_ context.Context, chatID int64, title string, err error) error {
	m.FailedCalls = append(m.FailedCalls, FailedCall{
		ChatID: chatID,
		Title:  title,
		Error:  err,
	})

	if m.ShouldError {
		return m.ErrorToReturn
	}
	return nil
}
